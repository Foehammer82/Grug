"""init

Revision ID: a656de6af92b
Revises: 
Create Date: 2024-06-02 14:55:52.538078

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a656de6af92b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('DAYS', 'WEEKS', 'MONTHS', 'YEARS', name='repeatinterval').create(op.get_bind())
    sa.Enum('YES', 'NO', 'MAYBE', 'NO_RESPONSE', name='rsvp').create(op.get_bind())
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('auto_created', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('disabled', sa.Boolean(), nullable=False),
    sa.Column('assistant_thread_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('auto_created', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('discord_accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('discord_member_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('discord_member_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('discord_servers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('discord_guild_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('discord_guild_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('event_schedule_cron', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('event_schedule_start_date', sa.Date(), nullable=True),
    sa.Column('event_schedule_end_date', sa.Date(), nullable=True),
    sa.Column('event_schedule_repeat_count', sa.Integer(), nullable=True),
    sa.Column('event_schedule_repeat_interval', postgresql.ENUM('DAYS', 'WEEKS', 'MONTHS', 'YEARS', name='repeatinterval', create_type=False), nullable=True),
    sa.Column('track_food', sa.Boolean(), nullable=False),
    sa.Column('food_reminder_cron', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('food_reminder_days_before_event', sa.Integer(), nullable=True),
    sa.Column('track_attendance', sa.Boolean(), nullable=False),
    sa.Column('attendance_reminder_cron', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('attendance_reminder_days_before_event', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users_groups_link',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'user_id')
    )
    op.create_table('users_secrets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('discordtextchannel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('discord_channel_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('assistant_thread_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('discord_server_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['discord_server_id'], ['discord_servers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('discordtextchannel', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_discordtextchannel_discord_channel_id'), ['discord_channel_id'], unique=False)

    op.create_table('event_attendance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_date', sa.Date(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('event_attendance', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_event_attendance_event_id'), ['event_id'], unique=False)

    op.create_table('event_food',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_date', sa.Date(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('user_assigned_food_id', sa.Integer(), nullable=True),
    sa.Column('food_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('food_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['user_assigned_food_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('event_food', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_event_food_event_id'), ['event_id'], unique=False)

    op.create_table('event_attendance_discord_messages',
    sa.Column('discord_message_id', sa.Integer(), nullable=False),
    sa.Column('event_attendance_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_attendance_id'], ['event_attendance.id'], ),
    sa.PrimaryKeyConstraint('discord_message_id')
    )
    with op.batch_alter_table('event_attendance_discord_messages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_event_attendance_discord_messages_event_attendance_id'), ['event_attendance_id'], unique=False)

    op.create_table('event_food_discord_messages',
    sa.Column('discord_message_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('event_food_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_food_id'], ['event_food.id'], ),
    sa.PrimaryKeyConstraint('discord_message_id')
    )
    with op.batch_alter_table('event_food_discord_messages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_event_food_discord_messages_event_food_id'), ['event_food_id'], unique=False)

    op.create_table('users_events_attendance_link',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('event_attendance_id', sa.Integer(), nullable=False),
    sa.Column('rsvp', postgresql.ENUM('YES', 'NO', 'MAYBE', 'NO_RESPONSE', name='rsvp', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['event_attendance_id'], ['event_attendance.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'event_attendance_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_events_attendance_link')
    with op.batch_alter_table('event_food_discord_messages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_food_discord_messages_event_food_id'))

    op.drop_table('event_food_discord_messages')
    with op.batch_alter_table('event_attendance_discord_messages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_attendance_discord_messages_event_attendance_id'))

    op.drop_table('event_attendance_discord_messages')
    with op.batch_alter_table('event_food', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_food_event_id'))

    op.drop_table('event_food')
    with op.batch_alter_table('event_attendance', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_attendance_event_id'))

    op.drop_table('event_attendance')
    with op.batch_alter_table('discordtextchannel', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_discordtextchannel_discord_channel_id'))

    op.drop_table('discordtextchannel')
    op.drop_table('users_secrets')
    op.drop_table('users_groups_link')
    op.drop_table('event')
    op.drop_table('discord_servers')
    op.drop_table('discord_accounts')
    op.drop_table('users')
    op.drop_table('groups')
    sa.Enum('YES', 'NO', 'MAYBE', 'NO_RESPONSE', name='rsvp').drop(op.get_bind())
    sa.Enum('DAYS', 'WEEKS', 'MONTHS', 'YEARS', name='repeatinterval').drop(op.get_bind())
    # ### end Alembic commands ###
